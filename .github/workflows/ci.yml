name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # Code Quality & Testing
  # ============================================================================
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type checking
        run: npm run type-check
        
      - name: Lint code
        run: npm run lint
        
      - name: Run tests
        run: npm test
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml
          retention-days: 7

  # ============================================================================
  # Security Audit
  # ============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level=high --json | jq '.vulnerabilities | length' | grep -v '^0$'; then
            echo "High or critical vulnerabilities found"
            exit 1
          fi

  # ============================================================================
  # Build for Multiple Platforms
  # ============================================================================
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [quality, security]
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Package application (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          npm run package:mac
          
      - name: Package application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          npm run package:linux
          
      - name: Upload build artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            dist/*.dmg
            dist/*.zip
          retention-days: 7
          
      - name: Upload build artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            dist/*.deb
            dist/*.tar.gz
          retention-days: 7

  # ============================================================================
  # Release (only on tags)
  # ============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: ./artifacts/macos/
          
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./artifacts/linux/
          
      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: CCTracker v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/macos/*
            ./artifacts/linux/*
          body: |
            ## CCTracker v${{ steps.version.outputs.VERSION }}
            
            ### üì¶ Downloads
            
            **macOS:**
            - `CCTracker-${{ steps.version.outputs.VERSION }}-mac-universal.dmg` - macOS Universal Binary (Intel + Apple Silicon)
            
            **Linux:**
            - `CCTracker-${{ steps.version.outputs.VERSION }}-linux-x64.deb` - Debian/Ubuntu Package
            - `CCTracker-${{ steps.version.outputs.VERSION }}-linux-x64.tar.gz` - Linux Tarball
            
            ### üöÄ Installation
            
            **macOS:**
            1. Download the `.dmg` file
            2. Open it and drag CCTracker to Applications
            3. Run CCTracker (you may need to allow it in System Preferences > Security & Privacy)
            
            **Linux:**
            ```bash
            # For Debian/Ubuntu:
            sudo dpkg -i CCTracker-${{ steps.version.outputs.VERSION }}-linux-x64.deb
            
            # For other distributions:
            tar -xzf CCTracker-${{ steps.version.outputs.VERSION }}-linux-x64.tar.gz
            ```
            
            ### ‚ö° Auto-Update
            This release includes automatic update functionality. CCTracker will notify you when new versions are available.
            
            ### üîí Security Note
            All releases are automatically scanned for vulnerabilities during our CI/CD process.

  # ============================================================================
  # Performance Monitoring (optional)
  # ============================================================================
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build and measure
        run: |
          npm run build
          echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          
          # Measure build sizes
          for file in dist/*.js; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              filename=$(basename "$file")
              echo "| $filename | $size |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Check if bundle size exceeds reasonable limits
          MAIN_SIZE=$(stat -c%s dist/main.js 2>/dev/null || echo "0")
          RENDERER_SIZE=$(stat -c%s dist/renderer.js 2>/dev/null || echo "0")
          
          echo "Main bundle size: ${MAIN_SIZE} bytes"
          echo "Renderer bundle size: ${RENDERER_SIZE} bytes"
          
          # Warn if bundles are too large (>10MB for main, >5MB for renderer)
          if [ "$MAIN_SIZE" -gt 10485760 ]; then
            echo "‚ö†Ô∏è Warning: Main bundle size exceeds 10MB"
          fi
          
          if [ "$RENDERER_SIZE" -gt 5242880 ]; then
            echo "‚ö†Ô∏è Warning: Renderer bundle size exceeds 5MB"
          fi