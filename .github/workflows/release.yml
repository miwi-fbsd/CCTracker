name: Release - Tag Triggered

on:
  push:
    tags: ['v*']

permissions:
  contents: write
  discussions: write

env:
  NODE_VERSION: '20'

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT

  build-mac-dmg:
    name: Build macOS DMG
    runs-on: macos-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Package macOS DMG
        run: npm run package:mac:dmg
        
      - name: Upload DMG artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg-${{ needs.prepare.outputs.version }}
          path: |
            dist/*.dmg
          retention-days: 90

  build-mac-zip:
    name: Build macOS ZIP (Auto-updater)
    runs-on: macos-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Package macOS ZIP
        run: npm run package:mac:zip
        
        
      - name: Upload ZIP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-zip-${{ needs.prepare.outputs.version }}
          path: |
            dist/*.zip
            dist/*.blockmap
          retention-days: 90

  build-linux-deb:
    name: Build Linux DEB
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss1 libasound2-dev
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Package Linux DEB
        run: npm run package:linux:deb
        
        
      - name: Upload DEB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb-${{ needs.prepare.outputs.version }}
          path: |
            dist/*.deb
          retention-days: 90

  build-linux-tar:
    name: Build Linux TAR.GZ
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss1 libasound2-dev
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Package Linux TAR.GZ
        run: npm run package:linux:tar
        
      - name: Upload TAR.GZ artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-tar-${{ needs.prepare.outputs.version }}
          path: |
            dist/*.tar.gz
          retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build-mac-dmg, build-mac-zip, build-linux-deb, build-linux-tar]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.dmg" -o -name "*.zip" -o -name "*.deb" -o -name "*.tar.gz" -o -name "*.blockmap" | xargs -I {} cp {} release-assets/
          ls -la release-assets/
          
      - name: Generate complete auto-updater metadata
        run: |
          cd release-assets
          
          # Get version from tag
          VERSION="${{ needs.prepare.outputs.version }}"
          RELEASE_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          
          # Find all files
          ZIP_FILE=$(ls CCTracker-*-mac-universal.zip 2>/dev/null | head -1 || echo "")
          DMG_FILE=$(ls CCTracker-*-mac-universal.dmg 2>/dev/null | head -1 || echo "")
          DEB_FILE=$(ls CCTracker-*-linux-x64.deb 2>/dev/null | head -1 || echo "")
          TAR_FILE=$(ls CCTracker-*-linux-x64.tar.gz 2>/dev/null | head -1 || echo "")
          BLOCKMAP_FILE=$(ls CCTracker-*-mac-universal.zip.blockmap 2>/dev/null | head -1 || echo "")
          
          # Generate latest-mac.yml with ALL macOS files
          if [ -n "$ZIP_FILE" ]; then
            ZIP_SIZE=$(stat -c%s "$ZIP_FILE" 2>/dev/null || stat -f%z "$ZIP_FILE")
            ZIP_SHA512=$(sha512sum "$ZIP_FILE" 2>/dev/null | cut -d' ' -f1 || shasum -a 512 "$ZIP_FILE" | cut -d' ' -f1)
            BLOCKMAP_SIZE="0"
            if [ -n "$BLOCKMAP_FILE" ]; then
              BLOCKMAP_SIZE=$(stat -c%s "$BLOCKMAP_FILE" 2>/dev/null || stat -f%z "$BLOCKMAP_FILE")
            fi
            
            cat > latest-mac.yml << EOF
          version: ${VERSION}
          files:
            - url: ${ZIP_FILE}
              sha512: ${ZIP_SHA512}
              size: ${ZIP_SIZE}
              blockMapSize: ${BLOCKMAP_SIZE}
          EOF
            
            # Add DMG file if it exists
            if [ -n "$DMG_FILE" ]; then
              DMG_SIZE=$(stat -c%s "$DMG_FILE" 2>/dev/null || stat -f%z "$DMG_FILE")
              DMG_SHA512=$(sha512sum "$DMG_FILE" 2>/dev/null | cut -d' ' -f1 || shasum -a 512 "$DMG_FILE" | cut -d' ' -f1)
              cat >> latest-mac.yml << EOF
            - url: ${DMG_FILE}
              sha512: ${DMG_SHA512}
              size: ${DMG_SIZE}
          EOF
            fi
            
            cat >> latest-mac.yml << EOF
          path: ${ZIP_FILE}
          sha512: ${ZIP_SHA512}
          releaseDate: ${RELEASE_DATE}
          EOF
            
            echo "Generated latest-mac.yml:"
            cat latest-mac.yml
          fi
          
          # Generate latest-linux.yml with ALL Linux files
          if [ -n "$DEB_FILE" ]; then
            DEB_SIZE=$(stat -c%s "$DEB_FILE" 2>/dev/null || stat -f%z "$DEB_FILE")
            DEB_SHA512=$(sha512sum "$DEB_FILE" 2>/dev/null | cut -d' ' -f1 || shasum -a 512 "$DEB_FILE" | cut -d' ' -f1)
            
            cat > latest-linux.yml << EOF
          version: ${VERSION}
          files:
            - url: ${DEB_FILE}
              sha512: ${DEB_SHA512}
              size: ${DEB_SIZE}
          EOF
            
            # Add TAR.GZ file if it exists
            if [ -n "$TAR_FILE" ]; then
              TAR_SIZE=$(stat -c%s "$TAR_FILE" 2>/dev/null || stat -f%z "$TAR_FILE")
              TAR_SHA512=$(sha512sum "$TAR_FILE" 2>/dev/null | cut -d' ' -f1 || shasum -a 512 "$TAR_FILE" | cut -d' ' -f1)
              cat >> latest-linux.yml << EOF
            - url: ${TAR_FILE}
              sha512: ${TAR_SHA512}
              size: ${TAR_SIZE}
          EOF
            fi
            
            cat >> latest-linux.yml << EOF
          path: ${DEB_FILE}
          sha512: ${DEB_SHA512}
          releaseDate: ${RELEASE_DATE}
          EOF
            
            echo "Generated latest-linux.yml:"
            cat latest-linux.yml
          fi
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: CCTracker ${{ needs.prepare.outputs.version }}
          files: release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## CCTracker ${{ needs.prepare.outputs.version }}
            
            ### ðŸ“¦ Downloads
            
            **macOS:**
            - `CCTracker-${{ needs.prepare.outputs.version }}-mac-universal.dmg` - macOS Universal Binary (Intel + Apple Silicon)
            
            **Linux:**
            - `CCTracker-${{ needs.prepare.outputs.version }}-linux-x64.deb` - Debian/Ubuntu Package
            - `CCTracker-${{ needs.prepare.outputs.version }}-linux-x64.tar.gz` - Linux Tarball
            
            ### ðŸ”„ Auto-Update
            This release includes automatic update functionality with proper metadata files.
            
            ### ðŸ“‹ Installation
            
            **macOS:** Download `.dmg` and drag to Applications
            **Linux:** Install `.deb` with `sudo dpkg -i` or extract `.tar.gz`