name: Build & Release

on:
  push:
    branches: [ main ]
    tags: ['v*']
  pull_request:
    branches: [ main ]
  schedule:
    # Nightly build at 2:00 AM UTC for main branch
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'manual'
        type: choice
        options:
          - manual
          - nightly
          - patch
          - minor
          - major
      build_targets:
        description: 'Build targets'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - mac-only
          - linux-only

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Version and release preparation
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_nightly: ${{ steps.version.outputs.is_nightly }}
      should_release: ${{ steps.version.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Determine version and release type
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          CURRENT_DATE=$(date +%Y%m%d)
          
          # Determine if this is a nightly build
          IS_NIGHTLY="false"
          SHOULD_RELEASE="false"
          
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event.inputs.release_type }}" == "nightly" ]]; then
            IS_NIGHTLY="true"
            VERSION="${PACKAGE_VERSION}-nightly.${CURRENT_DATE}"
            TAG="v${VERSION}"
            SHOULD_RELEASE="true"
          elif [[ "${{ github.event.inputs.release_type }}" == "manual" ]]; then
            VERSION="${PACKAGE_VERSION}-manual.$(date +%Y%m%d%H%M)"
            TAG="v${VERSION}"
            SHOULD_RELEASE="true"
          elif [[ "${{ github.event.inputs.release_type }}" =~ ^(patch|minor|major)$ ]]; then
            # For semantic releases, use the package.json version
            VERSION="${PACKAGE_VERSION}"
            TAG="v${VERSION}"
            SHOULD_RELEASE="true"
          else
            # Regular push/PR - no release
            VERSION="${PACKAGE_VERSION}-dev.${GITHUB_SHA::8}"
            TAG="v${VERSION}"
            SHOULD_RELEASE="false"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "is_nightly=${IS_NIGHTLY}" >> $GITHUB_OUTPUT
          echo "should_release=${SHOULD_RELEASE}" >> $GITHUB_OUTPUT
          
          echo "📦 Version: ${VERSION}"
          echo "🏷️ Tag: ${TAG}"
          echo "🌙 Nightly: ${IS_NIGHTLY}"
          echo "🚀 Should Release: ${SHOULD_RELEASE}"

  # Build for macOS
  build-mac:
    needs: prepare-release
    runs-on: macos-latest
    if: ${{ github.event.inputs.build_targets != 'linux-only' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          # Install native dependencies for Electron
          npm run postinstall || true

      - name: Update version in package.json
        run: |
          npm version ${{ needs.prepare-release.outputs.version }} --no-git-tag-version

      - name: Run tests
        run: npm test

      - name: Run type check
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Package for macOS (Universal)
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: npm run package:mac

      - name: Generate auto-updater metadata
        run: |
          # Generate latest-mac.yml for auto-updater
          ZIP_FILE=$(ls dist/*.zip | head -1)
          ZIP_NAME=$(basename "$ZIP_FILE")
          ZIP_SIZE=$(stat -f%z "$ZIP_FILE")
          ZIP_SHA512=$(shasum -a 512 "$ZIP_FILE" | cut -d' ' -f1)
          BLOCKMAP_FILE="${ZIP_FILE}.blockmap"
          BLOCKMAP_SIZE=$(stat -f%z "$BLOCKMAP_FILE")
          BLOCKMAP_SHA512=$(shasum -a 512 "$BLOCKMAP_FILE" | cut -d' ' -f1)
          
          cat > dist/latest-mac.yml << EOF
          version: ${{ needs.prepare-release.outputs.version }}
          files:
            - url: ${ZIP_NAME}
              sha512: ${ZIP_SHA512}
              size: ${ZIP_SIZE}
              blockMapSize: ${BLOCKMAP_SIZE}
          path: ${ZIP_NAME}
          sha512: ${ZIP_SHA512}
          releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          EOF
          
          echo "Generated latest-mac.yml:"
          cat dist/latest-mac.yml

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cctracker-mac-universal-${{ needs.prepare-release.outputs.version }}
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.blockmap
            dist/latest-mac.yml
          retention-days: 30

  # Build for Linux DEB (Debian/Ubuntu)
  build-linux-deb:
    needs: prepare-release
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_targets != 'mac-only' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss1 libasound2-dev

      - name: Install dependencies
        run: |
          npm ci
          npm run postinstall || true

      - name: Update version in package.json
        run: |
          npm version ${{ needs.prepare-release.outputs.version }} --no-git-tag-version

      - name: Run tests
        run: npm test

      - name: Run type check
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Package for Linux DEB
        run: npm run package:linux:deb

      - name: Generate Linux auto-updater metadata
        run: |
          # Generate latest-linux.yml for auto-updater
          DEB_FILE=$(ls dist/*.deb | head -1)
          DEB_NAME=$(basename "$DEB_FILE")
          DEB_SIZE=$(stat -c%s "$DEB_FILE")
          DEB_SHA512=$(sha512sum "$DEB_FILE" | cut -d' ' -f1)
          
          cat > dist/latest-linux.yml << EOF
          version: ${{ needs.prepare-release.outputs.version }}
          files:
            - url: ${DEB_NAME}
              sha512: ${DEB_SHA512}
              size: ${DEB_SIZE}
          path: ${DEB_NAME}
          sha512: ${DEB_SHA512}
          releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          EOF
          
          echo "Generated latest-linux.yml:"
          cat dist/latest-linux.yml

      - name: Upload Linux DEB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cctracker-linux-deb-${{ needs.prepare-release.outputs.version }}
          path: |
            dist/*.deb
            dist/latest-linux.yml
          retention-days: 30

  # Build for Linux TAR.GZ (Universal Linux)
  build-linux-tar:
    needs: prepare-release
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_targets != 'mac-only' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss1 libasound2-dev

      - name: Install dependencies
        run: |
          npm ci
          npm run postinstall || true

      - name: Update version in package.json
        run: |
          npm version ${{ needs.prepare-release.outputs.version }} --no-git-tag-version

      - name: Build application
        run: npm run build

      - name: Package for Linux TAR.GZ
        run: npm run package:linux:tar

      - name: Upload Linux TAR.GZ artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cctracker-linux-tar-${{ needs.prepare-release.outputs.version }}
          path: |
            dist/*.tar.gz
          retention-days: 30

  # Create release
  release:
    needs: [prepare-release, build-mac, build-linux-deb, build-linux-tar]
    runs-on: ubuntu-latest
    if: ${{ needs.prepare-release.outputs.should_release == 'true' && (success() || failure()) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.dmg" -o -name "*.deb" -o -name "*.tar.gz" | xargs -I {} cp {} release-assets/
          ls -la release-assets/

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(cat << 'EOF'
          ## CCTracker ${{ needs.prepare-release.outputs.version }}
          
          **Release Type:** ${{ github.event.inputs.release_type || 'nightly' }}
          **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Commit:** ${{ github.sha }}
          
          ### 🚀 What's New
          - Latest development build with all recent improvements
          - Performance optimizations and bug fixes
          - Enhanced cost tracking features
          
          ### 📦 Download Options
          
          **🍎 macOS:**
          - `CCTracker-${{ needs.prepare-release.outputs.version }}-universal.dmg` - Universal binary (Intel + Apple Silicon)
          
          **🐧 Linux:**
          - `CCTracker-${{ needs.prepare-release.outputs.version }}-amd64.deb` - Debian/Ubuntu package
          - `CCTracker-${{ needs.prepare-release.outputs.version }}-linux-x64.tar.gz` - Generic Linux archive
          
          ### 📋 Installation Instructions
          
          **macOS:** Open the `.dmg` file and drag CCTracker to Applications
          **Debian/Ubuntu:** `sudo dpkg -i CCTracker-*.deb && sudo apt-get install -f`
          **Other Linux:** Extract `.tar.gz` and run `./CCTracker`
          
          ### ⚠️ Note
          ${{ needs.prepare-release.outputs.is_nightly == 'true' && 'This is a nightly development build. Use at your own risk.' || 'This is a manual release build.' }}
          
          ---
          
          **Full Changelog:** https://github.com/${{ github.repository }}/compare/v${{ needs.prepare-release.outputs.version }}...main
          EOF
          )
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          name: CCTracker ${{ needs.prepare-release.outputs.version }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          files: release-assets/*
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is_nightly == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old nightly releases
        if: ${{ needs.prepare-release.outputs.is_nightly == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const nightlyReleases = releases.filter(release => 
              release.tag_name.includes('-nightly.') && release.prerelease
            );
            
            // Keep only the latest 7 nightly releases
            const releasesToDelete = nightlyReleases.slice(7);
            
            for (const release of releasesToDelete) {
              console.log(`Deleting old nightly release: ${release.tag_name}`);
              try {
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                // Also delete the git tag
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
              } catch (error) {
                console.log(`Failed to delete ${release.tag_name}: ${error.message}`);
              }
            }

  # Notify on completion
  notify:
    needs: [prepare-release, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Status Summary
        run: |
          if [[ "${{ needs.release.result }}" == "success" ]]; then
            echo "✅ Release ${{ needs.prepare-release.outputs.version }} created successfully!"
            echo "🔗 Download: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}"
          else
            echo "❌ Release failed or was skipped"
          fi
          
          echo "📊 Build Summary:"
          echo "- Version: ${{ needs.prepare-release.outputs.version }}"
          echo "- Nightly: ${{ needs.prepare-release.outputs.is_nightly }}"
          echo "- Should Release: ${{ needs.prepare-release.outputs.should_release }}"