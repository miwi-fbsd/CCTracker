name: Manual Build & Package

on:
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Build target platform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - mac-intel
          - mac-apple-silicon
          - linux-x64
      version_suffix:
        description: 'Version suffix (optional)'
        required: false
        default: ''
        type: string
      create_release:
        description: 'Create GitHub release'
        required: true
        default: false
        type: boolean
      draft_release:
        description: 'Create as draft release'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Prepare build configuration
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Determine version
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [[ -n "${{ github.event.inputs.version_suffix }}" ]]; then
            VERSION="${PACKAGE_VERSION}-${{ github.event.inputs.version_suffix }}"
          else
            VERSION="${PACKAGE_VERSION}-manual.$(date +%Y%m%d%H%M)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Build Version: ${VERSION}"

      - name: Generate build matrix
        id: matrix
        run: |
          case "${{ github.event.inputs.build_target }}" in
            "all")
              MATRIX='{"include":[
                {"os":"macos-latest","platform":"mac","arch":"x64","script":"package:mac:x64"},
                {"os":"macos-latest","platform":"mac","arch":"arm64","script":"package:mac:arm64"},
                {"os":"ubuntu-latest","platform":"linux","arch":"x64","script":"package:linux:x64"}
              ]}'
              ;;
            "mac-intel")
              MATRIX='{"include":[{"os":"macos-latest","platform":"mac","arch":"x64","script":"package:mac:x64"}]}'
              ;;
            "mac-apple-silicon")
              MATRIX='{"include":[{"os":"macos-latest","platform":"mac","arch":"arm64","script":"package:mac:arm64"}]}'
              ;;
            "linux-x64")
              MATRIX='{"include":[{"os":"ubuntu-latest","platform":"linux","arch":"x64","script":"package:linux:x64"}]}'
              ;;
          esac
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT
          echo "üèóÔ∏è Build Matrix: ${MATRIX}"

  # Build packages
  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.build_matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss1 libasound2-dev

      - name: Install dependencies
        run: |
          npm ci
          npm run postinstall

      - name: Update version
        run: npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version

      - name: Run quality checks
        run: |
          npm test
          npm run type-check
          npm run lint

      - name: Build application
        run: npm run build

      - name: Package application
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: npm run ${{ matrix.script }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cctracker-${{ matrix.platform }}-${{ matrix.arch }}-${{ needs.prepare.outputs.version }}
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
          retention-days: 90

  # Create release if requested
  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_release == 'true' && (success() || failure()) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" \) -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Generate release notes
        id: notes
        run: |
          NOTES=$(cat << 'EOF'
          ## CCTracker ${{ needs.prepare.outputs.version }}
          
          **Manual Build Release**
          
          **Build Information:**
          - Target: ${{ github.event.inputs.build_target }}
          - Commit: ${{ github.sha }}
          - Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Workflow: Manual Trigger
          
          **Quality Assurance:**
          ‚úÖ TypeScript compilation passed  
          ‚úÖ Unit tests passed  
          ‚úÖ Linting checks passed  
          ‚úÖ Build process completed successfully  
          
          **Available Downloads:**
          
          Select the appropriate package for your platform:
          
          **macOS:**
          - Intel Macs: `CCTracker-*-x64.dmg`
          - Apple Silicon Macs: `CCTracker-*-arm64.dmg`
          
          **Linux:**
          - x64 Systems: `CCTracker-*-x64.AppImage`
          - ARM64 Systems: `CCTracker-*-arm64.AppImage`
          - Debian/Ubuntu: `*.deb` packages
          - RedHat/Fedora: `*.rpm` packages
          
          **Installation Notes:**
          - macOS: Mount the DMG and drag to Applications folder
          - Linux: Make AppImage executable (`chmod +x`) and run directly
          - Package managers: Use appropriate `.deb` or `.rpm` files
          
          ---
          
          **Repository:** https://github.com/${{ github.repository }}
          EOF
          )
          
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: CCTracker ${{ needs.prepare.outputs.version }} (Manual Build)
          body: ${{ steps.notes.outputs.NOTES }}
          files: release-assets/*
          draft: ${{ github.event.inputs.draft_release == 'true' }}
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary
  summary:
    needs: [prepare, build, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## üöÄ Manual Build Summary"
          echo ""
          echo "**Version:** ${{ needs.prepare.outputs.version }}"
          echo "**Target:** ${{ github.event.inputs.build_target }}"
          echo "**Status:** ${{ needs.build.result }}"
          echo ""
          if [[ "${{ github.event.inputs.create_release }}" == "true" ]]; then
            echo "**Release:** ${{ needs.release.result }}"
            echo "**Draft:** ${{ github.event.inputs.draft_release }}"
            if [[ "${{ needs.release.result }}" == "success" ]]; then
              echo "üîó **Download:** https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare.outputs.version }}"
            fi
          else
            echo "**Release:** Skipped (not requested)"
          fi